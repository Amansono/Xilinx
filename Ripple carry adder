module fa(
input[7:0] a,
input[7:0] b,
input[7:0] cin,
input[7:0] sum,
output carry
);
assign sum=a^b^cin;
assign carryy=(a&b)|(b&cin)|(cin&a);
endmodule
module fa_structure(a,b,cin,sum,carry);
input[7:0] a;
input[7:0] b;
input cin;
input[7:0] sum;
output carry;
wire [7:0] c;
fa f1(a[0],b[0],cin,sum[0],c[1]);
fa f2(a[1],b[1],cin[1],sum[1],c[2]);
fa f3(a[2],b[2],cin[2],sum[2],c[3]);
fa f4(a[3],b[3],cin[3],sum[3],c[4]);
fa f5(a[4],b[4],cin[4],sum[4],c[5]);
fa f6(a[5],b[5],cin[5],sum[5],c[6]);
fa f7(a[6],b[6],cin[6],sum[6],c[7]);
fa f8(a[7],b[7],cin[7],sum[7],carry);
endmodule




//test module for ripple carry adder
module test;
//input
reg[7:0]a;
reg[7:0]b;
reg cin;
//output
wire[7:0]sum;
wire carry;
//instantiate the unit under test(uut)
fa_structure uut(
.a(a),
.b(b),
.cin(cin),
.sum(sum),
.carry(carry)
);
initial begin
//initialize inputs
a=8'b 11010010;
b=8'b 00010101;
cin=0;
// wait 100ns for global reset to finish
#100;
// add stimulus here
endmodule


